import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
movies = pd.read_csv('movies.csv')
movies.head(5)
movies.shape
def create_missing_df(dataframe):
  
  missing_index = dataframe.columns.tolist() 
  missing = dataframe.isnull().sum().tolist()
  missing_df = pd.DataFrame({'Missing':missing}, index=missing_index)

  return missing_df
create_missing_df(movies)
def extract_title(title):

  year = title[len(title)-5:len(title)-1]

  if year.isnumeric():
    title_no_year = title[:len(title)-7]
    return title_no_year

  else:
    return title
def extract_year(title):

  year = title[len(title)-5:len(title)-1]

  if year.isnumeric():
    return int(year)

  else:
    return np.nan
movies.rename(columns={'title':'title_year'}, inplace=True) 
movies['title_year'] = movies['title_year'].apply(lambda x: x.strip())
movies['title'] = movies['title_year'].apply(extract_title) 
movies['year'] = movies['title_year'].apply(extract_year)
create_missing_df(movies)
r,c = movies[movies['genres']=='(no genres listed)'].shape 
print('The number of movies which do not have info about genres:',r)
movies = movies[~(movies['genres']=='(no genres listed)')].reset_index(drop=True)
movies[['title','genres']].head(5)
movies['genres'] = movies['genres'].str.replace('|',' ')
counts = dict()

for i in movies.index:
  for g in movies.loc[i,'genres'].split(' '):
    if g not in counts:
      counts[g] = 1
    else:
      counts[g] = counts[g] + 1
plt.figure(figsize=(12,6))
plt.bar(list(counts.keys()), counts.values(), color='g')
plt.xticks(rotation=45)
plt.xlabel('Genres')
plt.ylabel('Counts')
from sklearn.feature_extraction.text import TfidfVectorizer
movies['genres'] = movies['genres'].str.replace('Sci-Fi','SciFi')
movies['genres'] = movies['genres'].str.replace('Film-Noir','Noir')
tfidf_vector = TfidfVectorizer(stop_words='english') 
tfidf_matrix = tfidf_vector.fit_transform(movies['genres'])
print(list(enumerate(tfidf_vector.get_feature_names())))
print(tfidf_matrix[:5])
tfidf_matrix.shape
tfidf_matrix.todense()[0]
from sklearn.metrics.pairwise import linear_kernel
sim_matrix = linear_kernel(tfidf_matrix,tfidf_matrix)
print(sim_matrix)
def get_title_year_from_index(index):

  return movies[movies.index == index]['title_year'].values[0]

def get_index_from_title(title):

  return movies[movies.title == title].index.values[0]
pip install fuzzywuzzy
from fuzzywuzzy import fuzz
def matching_score(a,b):

  return fuzz.ratio(a,b)
def get_title_from_index(index):

  return movies[movies.index == index]['title'].values[0]
def find_closest_title(title):

  leven_scores = list(enumerate(movies['title'].apply(matching_score, b=title)))
  sorted_leven_scores = sorted(leven_scores, key=lambda x: x[1], reverse=True)
  closest_title = get_title_from_index(sorted_leven_scores[0][0])
  distance_score = sorted_leven_scores[0][1]

  return closest_title, distance_score
def contents_based_recommender(movie_user_likes, how_many):

  closest_title, distance_score = find_closest_title(movie_user_likes)

  if distance_score == 100:

    movie_index = get_index_from_title(closest_title)
    movie_list = list(enumerate(sim_matrix[int(movie_index)]))
    similar_movies = list(filter(lambda x:x[0] != int(movie_index), sorted(movie_list,key=lambda x:x[1], reverse=True))) # remove the typed movie itself

    print('Here\'s the list of movies similar to '+'\033[1m'+str(closest_title)+'\033[0m'+'.\n')

    for i,s in similar_movies[:how_many]: 
      print(get_title_year_from_index(i))
    

  else:
    print('Did you mean '+'\033[1m'+str(closest_title)+'\033[0m'+'?','\n')

    movie_index = get_index_from_title(closest_title)
    movie_list = list(enumerate(sim_matrix[int(movie_index)]))
    similar_movies = list(filter(lambda x:x[0] != int(movie_index), sorted(movie_list,key=lambda x:x[1], reverse=True)))

    print('Here\'s the list of movies similar to '+'\033[1m'+str(closest_title)+'\033[0m'+'.\n')

    for i,s in similar_movies[:how_many]:
      print(get_title_year_from_index(i))
contents_based_recommender('Monsters, Inc.', 20)
contents_based_recommender('Jury Duty', 20)


 